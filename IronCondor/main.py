# Iron Condor strategy for SPY\n# Minute resolution, 6-month back-test\n\nfrom AlgorithmImports import *\nfrom datetime import timedelta\n\n\nclass IronCondorAlgorithm(QCAlgorithm):\n    def Initialize(self):\n        self.SetStartDate(2023, 1, 2)\n        self.SetEndDate(2023, 7, 1)\n        self.SetCash(100000)\n\n        self.underlying = self.AddEquity(\"SPY\", Resolution.Minute).Symbol\n        option = self.AddOption(\"SPY\", Resolution.Minute)\n        option.SetFilter(-10, +10, timedelta(20), timedelta(40))\n\n        self.SetWarmUp(timedelta(days=1))\n\n    def OnData(self, slice: Slice):\n        if self.IsWarmingUp or self.Portfolio.Invested:\n            return\n\n        chain = slice.OptionChains.get(\"SPY\")\n        if not chain:\n            return\n\n        # choose nearest expiry >20 days\n        chain = sorted(chain, key=lambda c: c.Expiry)\n        expiry = chain[0].Expiry\n        contracts = [c for c in chain if c.Expiry == expiry]\n        strikes = {c.Strike: c for c in contracts}\n\n        price = self.Securities[self.underlying].Price\n        atm = round(price / 5.0) * 5\n\n        call_short = strikes.get(atm + 5)\n        call_long = strikes.get(atm + 10)\n        put_short = strikes.get(atm - 5)\n        put_long = strikes.get(atm - 10)\n        if None in (call_short, call_long, put_short, put_long):\n            return\n\n        condor = OptionStrategies.IronCondor(\n            call_short.Symbol,\n            call_long.Symbol,\n            put_short.Symbol,\n            put_long.Symbol,\n            1,\n        )\n        self.Buy(condor, 1)
